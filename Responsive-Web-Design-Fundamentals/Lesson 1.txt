The use of mobile devices to surf the web is growing at an astronomical pace, but unfortunately much of the web isn't optimized for those mobile devices. Mobile devices are often constrained by display size and require a different approach to how content is laid out on screen.
移动设备用于浏览网页的增长非常迅猛，但是大部分网站都没有为移动设备做优化。通常来说，移动设备受限于显示尺寸并且对于内容在屏幕上的布局也有不同的方式。

In this lesson
本节主要内容

Set the viewport  设置viewport
Size content to the viewport  在viewport中调整内容显示尺寸
Use CSS media queries for responsiveness  使用CSS的媒体侦测实现响应性
How to choose breakpoints 如何选择折行点

There is a multitude of different screen sizes across phones, “phablets”, tablets, desktops, game consoles, TVs, even wearables. Screen sizes will always be changing, so it’s important that your site can adapt to any screen size, today or in the future.
各种不同的屏幕尺寸实在是太多了，手机、平板手机、平板电脑、游戏掌机、智能电视甚至还有可穿戴设备。屏幕尺寸总是在变化，所以重要的是你的站点要能适应任何屏幕尺寸，无论是现在还是将来。

Responsive web design, originally defined by Ethan Marcotte in A List Apart responds to the needs of the users and the devices they’re using. The layout changes based on the size and capabilities of the device. For example, on a phone, users would see content shown in a single column view; a tablet might show the same content in two columns.
响应式页面设计，最初是由Ethan Marcotte在A List Apart中定义为，对用户以及他们所用设备的需要作出回应。根据设备尺寸和功能调整页面布局。例如，在手机上用户会看到内容显示为一列，而在平板电脑上同样的内容会显示成两列。
(A List Apart在线地址： http://alistapart.com/article/responsive-web-design/)

Set the viewport
设置viewport
Pages optimized for a variety of devices must include a meta viewport element in the head of the document. A meta viewport tag gives the browser instructions on how to control the page’s dimensions and scaling.
要为各种设备优化页面，必须在document的头部包含名为viewport的meta标签。viewport这个meta标签告诉浏览器如何控制页面的尺寸和缩放比例。

Key Takeaways
要点
Use meta viewport tag to control the width and scaling of the browsers viewport.
使用viewport这个meta标签来控制浏览器可见窗口的宽度和缩放
Include width=device-width to match the screen's width in device independent pixels.
包含width=device-width来匹配与设备像素无关的屏幕宽度
Include initial-scale=1 to establish a 1:1 relationship between CSS pixels and device independent pixels.
包含initial-scale=1在CSS像素和与设备无关像素之间建立1:1的关系
Ensure your page is accessible by not disabling user scaling.
确保你的页面没有禁止用户缩放

In order to attempt to provide the best experience, mobile browsers will render the page at a desktop screen width (usually about 980px, though this varies across devices), and then try to make the content look better by increasing font sizes and scaling the content to fit the screen. For users, this means that font sizes may appear inconsistently and they have to double-tap or pinch-zoom in order to be able to see and interact with the content.
为了试图提供最佳体验，移动设备浏览器将按桌面宽度渲染页面（因设备而异，通常是980px），并且力图通过增大字号和缩放内容适应屏幕来让内容看起来好一些。对用户来说，这就意味着字体大小会不一致并且要对页面内容连按放大或双指缩放来看清楚或与之交互。

<meta name="viewport" content="width=device-width, initial-scale=1.0">

Using the meta viewport value width=device-width instructs the page to match the screen’s width in device independent pixels. This allows the page to reflow content to match different screen sizes, whether rendered on a small mobile phone or a large desktop monitor.
将viewport这个meta标签的值设为width=device-width，让页面用与设备无关的像素来匹配屏幕宽度。这样一来页面就可以重排内容来适应不同的屏幕宽度，无论是在手机的小屏幕还是桌面设备的大显示器。

Some browsers will keep the page’s width constant when rotating to landscape mode, and zoom rather than reflow to fill the screen. Adding the attribute initial-scale=1 instructs browsers to establish a 1:1 relationship between CSS pixels and device independent pixels regardless of device orientation, and allows the page to take advantage of the full landscape width.
有些浏览器在旋转到横屏模式的时候会保持页面宽度不变，用缩放而不是重排来填充屏幕。加入initial-scale=1的属性值，无论设备是什么方向都可以让浏览器在CSS像素和与设备无关的像素之间建立1:1的关系，并且页面可以充分利用完整的横屏宽度。

Remember
Use a comma to separate attributes to ensure older browsers can properly parse the attributes.
记住用逗号来分隔属性以确保旧版浏览器能正确解析它们。

Ensure an accessible viewport
确保可访问的屏显区域
In addition to setting an initial-scale, you can also set the minimum-scale, maximum-scale and user-scalable attributes on the viewport. When set, these can disable the user’s ability to zoom the viewport, potentially causing accessibility issues.
除了能为viewport设置initial-scale以外还有minimum-scale，maximum-scale以及user-scalable属性可供设置。这些属性被设置后会禁止用户缩放行为，有可能造成可访问性方面的问题。

Size content to the viewport
调整内容的大小适应屏显区域
On both desktop and mobile devices, users are used to scrolling websites vertically but not horizontally, and forcing the user to scroll horizontally or to zoom out in order to see the whole page results in a poor user experience.
不管是在桌面在移动设备上，用户都习惯于纵向滚动而不是横向，如果只能横向滚动或者缩小才能看清楚整个页面会导致很差的用户体验。

TL;DR
简而言之
Do not use large fixed width elements.
不要使用固定宽度太大的元素
Content should not rely on a particular viewport width to render well.
页面显示效果不能只考虑某些特定的屏宽
Use CSS media queries to apply different styling for small and large screens.
使用CSS媒体侦测为不同大小的屏幕提供不同的样式

When developing a mobile site with a meta viewport tag, it’s easy to accidentally create page content that doesn’t quite fit within the specified viewport. For example, an image that is displayed at a width wider than the viewport can cause the viewport to scroll horizontally. You should adjust this content to fit within the width of the viewport, so that the user does not need to scroll horizontally.
在开发移动网站时使用viewport这个meta标签，极有可能建立一个对指定的屏显区域适应的不是很好的页面。例如，一个图片以超过屏幕的宽度显示，就会造成出现横向滚动条。你应该调整这部分内容来适应屏显区域的宽度，这样用户就不用横向滚动浏览了。

Since screen dimensions and width in CSS pixels vary widely between devices (e.g. between phones and tablets, and even between different phones), content should not rely on a particular viewport width to render well.
不同设备的屏幕分辨率与CSS像素的宽度差别非常大（比如手机和平板，甚至不同的手机之间），页面显示效果不能只考虑某些特定屏显区域。

Setting large absolute CSS widths for page elements (such as the example below), will cause the div to be too wide for the viewport on a narrower device (e.g. a device with a width of 320 CSS pixels, such as an iPhone). Instead, consider using relative width values, such as width: 100%. Similarly, beware of using large absolute positioning values that may cause the element to fall outside the viewport on small screens.
给页面元素设置很大的绝对宽度样式（比如下面的例子），将会在较窄的设备上（比如iPhone这种只有320像素宽的）导致div宽度超过屏显区域。所以尽量考虑使用相对宽度，比如width: 100%。与此类似，使用大的绝对定位也可能在小屏幕导致页面元素跑到屏显区域之外。

Use CSS media queries for responsiveness
使用CSS媒体侦测来实现响应
Media queries are simple filters that can be applied to CSS styles. They make it easy to change styles based on the characteristics of the device rendering the content, including the display type, width, height, orientation and even resolution.
媒体侦测是可以应用于CSS样式的简单过滤器。使用它们可以很容易地实现基于设备特征而改变样式来渲染页面，包括显示类型、高度、屏幕方向甚至分辨率。

TL;DR
简而言之
Media queries can be used to apply styles based on device characteristics.
媒体侦测可用于按设备特征应用不同的样式
Use min-width over min-device-width to ensure the broadest experience.
使用min-width比min-device-width来确保在更大范围得到良好体验
Use relative sizes for elements to avoid breaking layout.
给元素定义相对大小来避免撑开页面

For example, you could place all styles necessary for printing inside a print media query:
例如，在用于打印页面的媒体侦测中应用所有必须的样式

<link rel="stylesheet" href="print.css" media="print">

In addition to using the media attribute in the stylesheet link, there are two other ways to apply media queries that can be embedded in a CSS file: @media and @import. For performance reasons, either of the first two methods are recommended over the @import syntax.
除了在外链样式表中使用媒体属性，还有其他两种可以嵌入在CSS文件中的申请媒体侦测的办法：@media和@import。出于性能上的考虑@import不如前两种值得推荐。

@media print {
  /* print style sheets go here */
}

@import url(print.css) print;

The logic that applies to media queries is not mutually exclusive and any filter that meets that criteria the resulting CSS block will be applied using the standard rules of precedence in CSS.
适用于媒体查询的逻辑不是相互排斥的，并且符合该标准所产生的CSS块将使用CSS中的优先标准规则被应用于任何过滤器。

Apply media queries based on viewport size
基于屏显区域大小应用媒体侦测

Media queries enable us to create a responsive experience, where specific styles are applied to small screens, large screens and anywhere in between. The media query syntax allows for the creation of rules that can be applied depending on device characteristics.
当要给大小不同的屏幕指定不同的样式时，通过媒体侦测可以创建响应式体验。媒体侦测的语法允许根据设备特征而创建规则。

@media (query) {
  /* CSS Rules used when query matches */
}

While there are several different items we can query on, the ones used most often for responsive web design are min-width, max-width, min-height and max-height.
有很多用来侦测的项，在响应式网页设计中最常用的有min-width，max-width，min-height和max-height。


min-width 	Rules applied for any browser width over the value defined in the query.
            浏览器的宽度超过指定的值
max-width 	Rules applied for any browser width under the value defined in the query.
            浏览器的宽度低于指定的值
min-height	Rules applied for any browser height over the value defined in the query.
            浏览器的高度超过指定的值
max-height	Rules applied for any browser height under the value defined in the query.
            浏览器的高度低于指定的值
            
orientation=portrait	Rules applied for any browser where the height is greater than or equal to the width.
                      浏览器的高度大于或等于宽度（竖向）
orientation=landscape	Rules for any browser where the width is greater than the height.
                      浏览器的宽度大于高度（横向）

Let’s take a look an example:
举例看一下：

    <link rel="stylesheet" media="(max-width: 640px)" href="max-640px.css">
    <link rel="stylesheet" media="(min-width: 640px)" href="min-640px.css">
    <link rel="stylesheet" media="(orientation: portrait)" href="portrait.css">
    <link rel="stylesheet" media="(orientation: landscape)" href="landscape.css">
    <style>
      @media (min-width: 500px) and (max-width: 600px) {
        h1 {
          color: fuchsia;
        }

        .desc:after {
          content:" In fact, it's between 500px and 600px wide.";
        }
      }
    </style>

    When the browser is between 0px and 640px wide, max-640px.css will be applied.
    当宽度在0px到640px之间时，使用max-640px.css
    When the browser is between 500px and 600px wide, styles within the @media will be applied.
    当宽度在500px到600px之间时，使用在@media中定义的样式
    When the browser is 640px or wider, min-640px.css will be applied.
    当宽度大于等于640px时，使用min-640px.css
    When the browser width is greater than the height, landscape.css will be applied.
    当宽度超过高度时，使用landscape.css
    When the browser height is greater than the width, portrait.css will be applied.
    当高度超过宽度时，使用portrait.css

A note on min-device-width
关于min-device-width的一点备注
In addition to *-width, it is also possible to create queries based on *-device-width; the difference is subtle but very important. min-width is based on the size of the browser window, where as min-device-width is based on the size of the screen.
除了*-width的语法，还可以创建基于的*-device-width的侦测；两者的区别很小但是非常重要。min-width是看浏览器窗口的大小，而min-device-width根据的则是屏幕的大小。

On a mobile device, this really doesn’t matter that much as in most cases the user can’t resize the window, but on a desktop, users can control the size of their windows and will expect the content to adapt naturally. Therefore, you should avoid using *-device-width, since the page won’t respond when the desktop browser window is resized.
在移动设备上，这个不是很重要因为大部分情况下用户是无法改变窗口大小的，但是在桌面设备上，用户可以调整窗口大小并且希望页面内容能自然适应窗口变化。此时要注意避免使用*-device-width，因为当桌面浏览器的窗口改变大小的时候页面是无法正确响应的。

Use relative units
使用相对值单位
A key concept behind responsive design is fluidity and proportionality as opposed to fixed width layouts. Using relative units for measurements can help simplify layouts and prevent accidentally creating components that are too big for the viewport.
与固定宽度布局相比，响应式设计关键的概念是流动和比例。使用相对的计量单位可以简化布局并防止意外地创建大于屏显区域的组件。

For example, setting width: 100% on a top level div, ensures that it spans the width of the viewport and is never too big or too small for the viewport. The div will fit, no matter if it’s a 320px wide iPhone, 342px wide Blackberry Z10 or a 360px wide Nexus 5.
例如，为最顶层的div设置宽度为100%，可以确保它正好与屏显宽度相同。无论是320px宽的iPhone、342px宽的Blackberry Z10还是360px宽的Nexus 5，这个div都能很好适应。

In addition, using relative units allows browsers to render the content based on the users zoom level without the need for adding horizontal scroll bars to the page.
另外，使用相对单位还可以让浏览器根据用户的缩放级别来渲染内容，而无需为页面加上横向滚动条。

示例：
NO(固定宽度，不建议)
div.fullWidth {
  width: 320px;
  margin-left: auto;
  margin-right: auto;
}

YES(相对宽度，建议做法)
div.fullWidth {
  width: 100%;
}

How to choose breakpoints
如何选择换行点
While it may be helpful to think about defining breakpoints based on device classes, use caution. Defining breakpoints based on specific devices, products, brand names or operating systems, that are in use today will result in a maintenance nightmare. Instead, the content itself should determine how the layout adjusts to its container.
虽然基于设备类型定义换行点的考虑会有一定的用处，但是要慎用。为市面上特定的设备、产品、品牌或者操作系统定义换行点，维护起来就象噩梦一样。其实页面内容本身应决定如何为它的容器调整布局。

TL;DR
简而言之
Create breakpoints based on content, never on specific devices, products or brands.
要根据内容创建换行点，一定不要按特定设备产品或品牌。
Design for the smallest mobile device first, then progressively enhance the experience as more screen real estate becomes available.
首先考虑为最小的移动设备设计，然后逐步优化对更多屏幕的体验。
Keep lines of text to a maximum of around 70 or 80 characters.
保持一行文字最多70到80个字符。



