Create Amazing Forms
创建超凡的表单

Forms are hard to fill out on mobile. The best forms are the ones with the fewest inputs. Good forms provide semantic input types. Keys should change to match the user's input type; users pick a date in a calendar. Keep your user informed. Validation tools should tell the user what they need to do before submitting the form.
在手机上填表单很困难。最好的表单是那些输入项最少的。好的表单提供语义化的输入类型。提示方式会随着用户输入类型而变化，比如用户可在一个日历上挑选日期。保持对用户进行提示。校验工具应该告知用户在提交表单之前还需要做什么。

4 Guides available
共有4篇教程

=====================================================
Choose the best input type
选择最佳输入类型
=====================================================

Every tap counts. Users appreciate websites that automatically present number pads for entering phone numbers, or automatically advance fields as they entered them. Look for opportunities to eliminate wasted taps in your forms.
每一次的点按累积起来。用户会很欣赏那些在输入电话号码时自动呈现数字面板或者其它的自动呈现高级选项的网站。尽量减少在表单中的无效点按。

TL;DR
简而言之
  ·Choose the most appropriate input type for your data to simplify input.
  为你的数据选择最恰当的输入类型以简化输入操作
  ·Offer suggestions as the user types with the datalist element.
  在用户输入时通过datalist为其提供建议

HTML5 input types
HTML5输入类型

HTML5 introduced a number of new input types. These new input types give hints to the browser about what type of keyboard layout to display for on-screen keyboards. Users are more easily able to enter the required information without having to change their keyboard and only see the appropriate keys for that input type.
HTML5提供了大量新增的输入类型。这些新的输入类型可以告诉浏览器显示什么样的虚拟键盘样式。用户更易于输入要求的信息而不必改变键盘样式，只会看到和当前输入类型相关的键。

url
For entering a URL. It must start with a valid URI scheme, for example http://, ftp:// or mailto:.	
tel
For entering phone numbers. It does not enforce a particular syntax for validation, so if you want to ensure a particular format, you can use pattern.	
email
For entering email addresses, and hints that the @ should be shown on the keyboard by default. You can add the multiple attribute if more than one email address will be provided.	
search
A text input field styled in a way that is consistent with the platform's search field.	
number
For numeric input, can be any rational integer or float value.	
range
For number input, but unlike the number input type, the value is less important. It is displayed to the user as a slider control.	
datetime-local
For entering a date and time value where the time zone provided is the local time zone.	
date
For entering a date (only) with no time zone provided.	
time
For entering a time (only) with no time zone provided.	
week
For entering a week (only) with no time zone provided.	
month
For entering a month (only) with no time zone provided.	
color
For picking a color.	

Offer suggestions during input with datalist
在输入过程中通过datalist提供建议

The datalist element isn’t an input type, but a list of suggested input values to associated with a form field. It lets the browser suggest autocomplete options as the user types. Unlike select elements where users must scan long lists to find the value they’re looking for, and limiting them only to those lists, datalists provide hints as the user types.
这个datalist元素并不是个输入类型，而是绑定在某个表单字段上建议输入的值列表。它使得浏览器在用户输入的时候给出自动完成的建议选项。不象下拉列表那样用户必须在很长的列表中去找到想要的值，而且限制为只能是固定的列表，datalist可以在用户输入时给出提示。

    <label for="frmFavChocolate">Favorite Type of Chocolate</label>
    <input type="text" name="fav-choc" id="frmFavChocolate" list="chocType">
    <datalist id="chocType">
      <option value="white">
      <option value="milk">
      <option value="dark">
    </datalist>

Remember
切记

The datalist values are provided as suggestions, and users are not restricted to the suggestions provided.
放在datalist里面的值只是提供建议，并不能强制用户使用它们。


=====================================================
Label and name inputs properly
为输入项加上恰当的标签和命名
=====================================================

Forms are hard to fill out on mobile. The best forms are the ones with the fewest inputs. Good forms provide semantic input types. Keys should change to match the user's input type; users pick a date in a calendar. Keep your user informed. Validation tools should tell the user what they need to do before submitting the form.
在手机上填写表单是件困难的事。最好的表单就是输入项最少的。好的表单提供语义输入类型。键盘要为匹配用户输入类型而改变；用户可以在日历上选择日期。保持给用户提示。检验工具应该在用户准备提交表单之前告诉他们还有什么要做的。

TL;DR
简而言之
  ·Always use labels on form inputs, and ensure they're visible when the field is in focus.
  总是要给表单输入项加标签，而且确保当字段被置为焦点时标签是可见的。
  ·Use placeholders to provide guidance about what you expect.
  使用占位符为你的预期提供指引
  ·To help the browser auto-complete the form, use established name's for elements and include the autocomplete attribute.
  为帮助浏览器自动完成表单，尽量给元素使用惯用名称并且包含autocomplete属性。

The importance of labels
标注的重要性

The label element provides direction to the user, telling them what information is needed in a form element. Each label is associated with an input element by placing it inside the label element, or by using the “for” attribute. Applying labels to form elements also helps to improve the touch target size: the user can touch either the label or the input in order to place focus on the input element.
标注元素给用户提供指导，告诉他们该表单项需要什么信息。每个标注只能附属于一个输入项，只要将其被label标签嵌套，或者使用for属性。给表单元素使用标注也有助于改善目标可点按区域的大小：用户在标注或在输入项上点按都可以将输入项置为焦点。

    <label for="frmAddressS">Address</label>
    <input type="text" name="ship-address" required id="frmAddressS"
      placeholder="123 Any Street" autocomplete="shipping street-address">

Label sizing and placement
标注大小和位置

Labels and inputs should be large enough to be easy to press. In portrait viewports, field labels should be above input elements, and beside them in landscape. Ensure field labels and the corresponding input boxes are visible at the same time. Be careful with custom scroll handlers that may scroll input elements to the top of the page hiding the label, or labels placed below input elements may be covered by the virtual keyboard.
标注和输入项应该足够大以方便点按。在竖屏时，字段标注应该放在输入项的上面，横屏时显示在输入项里面。确保字段标注和对应的输入框能同时显示出来。要注意随意滚动可能会把输入项滚动到页面顶端而将标注隐藏，标注放在输入项的下面可能会被虚拟键盘盖住。

Use placeholders
使用占位符

The placeholder attribute provides a hint to the user about what’s expected in the input by displaying its value as light text until the element gets focus.
占位符属性告诉用户这个输入项需要怎么填，在没有获得焦点之前以浅色显示属性值。

<input type="text" placeholder="MM-YYYY" ...>

Remember
切记

  ·Placeholders disappear as soon as focus is placed in an element, thus they are not a replacement for labels. They should be used as an aid to help guide users on the required format and content.
  占位符在元素获得焦点时就会消失，因此它不能用来取代标注。它应该用来帮助用户明白需要填写的内容和格式。

Use metadata to enable auto-complete
使用元数据来打开自动完成

Users appreciate when websites save them time by automatically filling common fields like names, email addresses and other frequently used fields, plus it helps to reduce potential input errors – especially on virtual keyboards and small devices.
在填写那些通用的比如名称、邮箱以及其他那些经常会用到的字段时，用户很感谢可以自动完成帮他们节约时间的网站，还可以避免在小设备上用虚拟键盘可能产生的输入错误。

Browsers use many heuristics to determine which fields they can auto-populate based on previously specified data by the user, and you can give hints to the browser by providing both the name attribute and the autocomplete attribute on each input element.
浏览器使用很多探索法来确定哪个字段可以根据之前用户填过的信息来自动植入数据，你可以在每个输入项元素加上名称和自动完成属性来给浏览器些指引。

For example, to hint to the browser that it should auto-complete the form with the users name, email address and phone number, you should use:
例如，为了让浏览器知道要把用户名、邮箱、电话号码这几项自动完成，象下面这样：

    <label for="frmNameA">Name</label>
    <input type="text" name="name" id="frmName"
    placeholder="Full name" required autocomplete="name">

    <label for="frmEmailA">Email</label>
    <input type="email" name="email" id="frmEmailA"
      placeholder="name@example.com" required autocomplete="email">

    <label for="frmEmailC">Confirm Email</label>
    <input type="email" name="emailC" id="frmEmailC"
      placeholder="name@example.com" required autocomplete="email">
    
    <label for="frmPhoneNumA">Phone</label>
    <input type="tel" name="phone" id="frmPhoneNumA"
      placeholder="+1-555-555-1212" required autocomplete="tel">
    
The autocomplete attributes should be prefixed with either shipping or billing, depending on the context.
autocomplete属性应该视上下文需要加个shipping或billing前缀。

Remember
切记
  ·Auto-complete only works when the form method is post.
  自动完成只有在表单的method设为post时才有效。

The autofocus attribute
自动获得焦点属性

On some forms, for example the Google home page where the only thing you want the user to do is fill out a particular field, you can add the autofocus attribute. When set, desktop browsers immediately move the focus to the input field, making it easy for users to quickly begin using the form. Mobile browsers ignore the autofocus attribute, to prevent the keyboard from randomly appearing.
有些表单比如Google首页，就是那种只有一个可以填写的输入框，这时可以加上autofocus属性。设置这个属性以后，桌面浏览器会马上把焦点置于这个输入框，便于用户快速开始使用表单。移动浏览器会忽略autofocus属性，以阻止键盘的随机出现。

Be careful using the autofocus attribute because it will steal keyboard focus and potentially preventing the backspace character from being used for navigation.
使用autofocus属性一定要多加注意，因为它会抢占键盘焦点并可能会阻止退格键用于导航。

<input type="text" autofocus ...>



=====================================================
Provide real-time validation
提供实时校验
=====================================================

Real-time data validation doesn't just help to keep your data clean, but it also helps improve the user experience. Modern browsers have several built-in tools to help provide real-time data validation and may prevent the user from submitting an invalid form. Visual cues should be used to indicate whether a form has been completed properly.
实时数据校验不仅可以保持你的数据不会乱，它还能帮助改善用户体验。现代浏览器提供多种内置工具助力实时数据校验并且阻止用户提交不合法表单。可视化的提示会指出表单是否被正确填写。

TL;DR
简而言之
  ·Leverage the browser's built-in validation attributes like pattern, required, min, max, etc.
  借助浏览器内置的校验属性比如模板、必填项、最小值、最大值等等。
  ·Use JavaScript and the Constraints Validation API for more complex validation requirements.
  为更复杂的需求使用JavaScript以及强制校验API
  ·Show validation errors in real time, and if the user tries to submit an invalid form, show all fields they need to fix.
  实时显示校验错误提示，并且在用户试图提交一个无效表单的时候，将所有需要修改的字段高亮显示。

Use these attributes to validate input
使用这些属性进行输入校验

The pattern attribute
模板属性

The pattern attribute specifies a regular expression used to validate an input field. For example, to validate a US Zip code (5 digits, sometimes followed by a dash and an additional 4 digits), we would set the pattern like this:
模板属性指定一个正则表达式用于输入字段的校验。比如，校验一个美国邮政编码(5位数字，有时后面会跟一个破折号以及4位附加数字)，我们可以这样定义模板：

<input type="text" pattern="^\d{5,6}(?:[-\s]\d{4})?$" ...>

Common regular expression patterns
常用的正则表达式模板

Postal address	[a-zA-Z\d\s\-\,\#\.\+]+
Zip Code (US)	^\d{5,6}(?:[-\s]\d{4})?$
IP Address	^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
Credit Card Number	^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\d{3})\d{11})$
Social Security Number	^\d{3}-\d{2}-\d{4}$
North American Phone Number	^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$

The required attribute
必填属性

If the required attribute is present, then the field must contain a value before the form can be submitted. For example, to make the zip code required, we’d simply add the required attribute:
如果指定了必填的属性，相应的字段必须填写表单才能被提交。比如指定邮编字段是必填项，只要加一个required属性就好了。

<input type="text" required pattern="^\d{5,6}(?:[-\s]\d{4})?$" ...>

The min, max and step attributes
最小值、最大值和步进值属性

For numeric input types like number or range as well as date/time inputs, you can specify the minimum and maximum values, as well as how much they should each increment/decrement when adjusted by the slider or spinners. For example, a shoe size input would set a minumum size of 1 and a maximum size 13, with a step of 0.5
对于那些输入类型为数字，例如日期时间这种数字或范围的输入项，可以指定最小和最大值，同时也可以指定调节滑杆或旋钮时每次加减多少。比如，鞋子尺码输入项将设置最小值为1最大值为13，每次加减0.5。

<input type="number" min="1" max="13" step="0.5" ...>

The maxlength attribute
最大长度属性

The maxlength attribute can be used to specify the maximum length of an input or textbox and is useful when you want to limit the length of information that the user can provide. For example, if you want to limit a filename to 12 characters, you can use the following.
最大长度属性用来指定一个输入字段或文本框的可输入最多的字符，对于想要限制用户输入内容时很有用。比如，下面的例子中限制文件名不超过12个字符。

<input type="text" id="83filename" maxlength="12" ...>

The novalidate attribute
未校验通过属性

In some cases, you may want to allow the user to submit the form even if it contains invalid input. To do this, add the novalidate attribute to the form element, or individual input fields. In this case, all pseudo classes and JavaScript APIs will still allow you to check if the form validates.
有时候即便表单包含未能通过校验的输入项也想允许用户提交。这时候，给表单或者输入字段加上novalidate属性就可以了。所有伪类和JavaScript API仍将允许你检查表单的校验结果。

<form role="form" novalidate>
  <label for="inpEmail">Email address</label>
  <input type="email" ...>
</form>

Remember
切记

Even with client-side input validation, it is always important to validate data on the server to ensure consistency and security in your data.
即便可以通过客户端进行校验，为确保数据的质量和安全而在服务器端校验是很重要的。

Use JavaScript for more complex real-time validation
使用JavaScript实现更复杂的实时校验

When the built-in validation plus regular expressions aren’t enough, you can use the Constrains Validation API, a powerful tool for handling custom validation. The API allows you to do things like set a custom error, check whether an element is valid, and determine the reason that an element is invalid:
当内置的校验和正则表达式也够用的时候，你可以使用Constrains Validation API(http://dev.w3.org/html5/spec-preview/constraints.html#constraint-validation)，这是一个强大的自定义校验工具。该API支持做很多事像自定义错误、检查一个元素是否有效以及测定元素无效的原因。

setCustomValidity()	Sets a custom validation message and the customError property of the ValidityState object to true.
validationMessage	Returns a string with the reason the input failed the validation test.

checkValidity()	Returns true if the element satisfies all of it's constraints, and false otherwise.
validity	Returns a ValidityState object representing the validity states of the element.

Set custom validation messages
设置自定义校验消息

If a field fails validation, use setCustomValidity() to mark the field invalid and explain why the field didn’t validate. For example, a sign up form might ask the user to confirm their email address by entering it twice. Use the blur event on the second input to validate the two inputs and set the appropriate response. For example:
如果一个字段未能通过校验，使用setCustomValidity()将其标记为无效并给出原因。比如一个注册表单可能要求用户重复输入以确认其电子邮箱。在第二个输入项使用blur事件来校验两次输入是否一致并给出相应的原因。如下例：

    if (input.value != primaryEmail) {
      // the provided value doesn't match the primary email address
      input.setCustomValidity('The two email addresses must match.');
      console.log("E-mail addresses do not match", primaryEmail, input.value);
    } else {
      // input is valid -- reset the error message
      input.setCustomValidity('');
    }

Prevent form submission on invalid forms
阻止无效表单的提交

Because not all browsers will prevent the user from submitting the form if there is invalid data, you should catch the submit event, and use the checkValidity() on the form element to determine if the form is valid. For example:
因为不是所有的浏览器都会阻止用户提交包含无效数据的表单，你应该捕捉提交事件，在表单元素使用checkValidity()去检测表单是否有效。如下例：

    form.addEventListener("submit", function(evt) {
      if (form.checkValidity() === false) {
        evt.preventDefault();
        alert("Form is invalid - submission prevented!");
        return false;
      } else {
        // To prevent data from being sent, we've prevented submission
        // here, but normally this code block would not exist.
        evt.preventDefault();
        alert("Form is valid - submission prevented to protect privacy.");
        return false;
      }
    });

Show feedback in real-time
实时反馈

It’s helpful to provide a visual indication on each field that indicates whether the user has completed the form properly before they’ve submitted the form. HTML5 also introduces a number of new pseudo-classes that can be used to style inputs based on their value or attributes.
为每个字段提供可视化的指示，在用户提交表单之前让他知道是否已全部正确填写是很有帮助的。HTML5同时提出了大量新的伪类可用于根据填写的值或属性来风格化输入项。

:valid	Explicitly sets the style for an input to be used when the value meets all of the validation requirements.
:invalid	Explicitly sets the style for an input to be used when the value does not meet all of the validation requirements.
:required	Explicitly sets the style for an input element that has the required attribute set.
:optional	Explicitly sets the style for an input element that does not have the required attribute set.
:in-range	Explicitly sets the style for a number input element where the value is in range.
:out-of-range	Explicitly sets the style for a number input element where the value is out of range.

Validation happens immediately which means that when the page is loaded, fields may be marked as invalid, even though the user hasn’t had a chance to fill them in yet. It also means that as the user types, and it’s possible they’ll see the invalid style while typing. To prevent this, you can combine the CSS with JavaScript to only show invalid styling when the user has visited the field.
立即进行检验意味着当页面加载完的时候，字段可能被无效地标记，即使用户还没机会去填写。同时也意味着当用户打字的时候看到提示无效的样式。为了避免这些，你可以在用户已经操作完成之后再用JavaScript来绑定CSS。

    input.dirty:not(:focus):invalid {
      background-color: pink;
    }

    var inputs = document.getElementsByTagName("input");
    var inputs_len = inputs.length;
    var addDirtyClass = function(evt) {
      sampleCompleted("Forms-order-dirty");
      evt.srcElement.classList.toggle("dirty", true);
    };
    for (var i = 0; i < inputs_len; i++) {
      var input = inputs[i];
      input.addEventListener("blur", addDirtyClass);
      input.addEventListener("invalid", addDirtyClass);
    }

Important
重点

You should show the user all of the issues on the form at once, rather than showing them one at a time.
应该给用户一次显示出全部的问题，而不是每次显示一个。


=====================================================
Simplify checkout with requestAutocomplete API
使用requestAutocompleteAPI简化校验
=====================================================

While `requestAutocomplete` was designed to help users fill out any form, today it's most common use is in eCommerce where shopping cart abandonment on the mobile web can be as high as 97%. Imagine 97% of people in a supermarket, with a cart brimming full of things that they want, flipping their cart over and walking out.
requestAutocomplete就是设计用于帮助用户填写各种表单的，如今它在电子商务移动网站购物车结算时使用率最高达到97%(http://seewhy.com/blog/2012/10/10/97-shopping-cart-abandonment-rate-mobile-devices-concern-you/)。想象在一个超市里97%的用户推着满满的手推车熙熙攘攘地走出来的情景吧。

TL;DR
简而言之
  ·requestAutocomplete can greatly simplify the checkout process and improve the user experience.
  requestAutocomplete可以大大简化校验过程并改善用户体验。
  ·If requestAutocomplete is available, hide the checkout form and move people directly to the confirmation page.
  如果requestAutocomplete可用，就隐藏校验表单并将用户指引到确认页面。
  ·Ensure input fields include the appropriate autocomplete attribute.
  确保输入框包含适当的自动完成属性。

Rather than the site relying on a particular payment provider, requestAutocomplete requests payment details (such as name, address and credit card information) from the browser, which are optionally stored by the browser much like other auto-complete fields.
与那些依赖指定支付厂商的网站不同的是，requestAutocomplete需要从浏览器得到支付的详细信息（比如名称、地址、信用卡信息等），与其他的自动完成字段一样这些都会被浏览器随意地存储。

The ideal experience will show the requestAutocomplete dialog instead of loading the page that displays the checkout form. If all goes well, the user shouldn’t see the form at all. You can easily add requestAutoComplete to existing forms without having to change any field names. Simply add the autocomplete attribute to each form element with the appropriate value and add the requestAutocomplete() function on the form element. The browser will handle the rest.
理想的体验将显示requestAutocomplete的提示而不是加载显示校验表单的页面。如果做得足够好，用户就该根本看不到表单。你可以为现有的表单加上requestAutocomplete功能功能而不用改动任何字段名。给每个表单项简单地加上autocomplete属性以及适当的默认值，然后给表单元素添加requestAutocomplete()函数即可。剩下的都让浏览器来处理吧。

    var doRAC = document.getElementById("doRAC");
    doRAC.addEventListener("click", doRequestAutocomplete);

    form = document.getElementById("usrForm");
    form.addEventListener("autocompleteerror", requestAutocompleteError);
    form.addEventListener("autocomplete", requestAutocompleteCompleted);

    if (form.requestAutocomplete) {
      isRACSupported(true, "");
    } else {
      isRACSupported(false, "Please complete the form manually.");
    }

The requestAutocomplete function on the form element indicates to the browser that it should populate the form. As a security feature, the function must be called via a user gesture like a touch or mouse click. A dialog is then displayed asking the user permission to populate the fields and which details they want to populate it with.
表单元素的requestAutocomplete函数各浏览器指出它应该填充这个表单。作为一项安全功能，这个函数必须由用户手势比如手指点按或鼠标点击来调用。然后会显示一个对话框请求用户授权以向该字段填入他们想要的内容。

    function requestAutocompleteCompleted(evt) {
      console.log("requestAutocomplete Completed", evt);
      form.classList.toggle("hidden", false);
    }

    function requestAutocompleteError(evt) {
      console.log("requestAutocomplete Error", evt);
      isRACSupported(false, "An error occured attempting to autocomplete the form.");
    }

Upon completion of requestAutocomplete, the function will either fire the autocomplete event if it finished successfully, or autocompleteerror if it was unable to complete the form. If it completed successfully and the form validates to your needs, simply submit the form and proceed to the final confirmation.
在requestAutocomplete将近完成时，如果成功完成就会触发autocomplete事件否则就触发autocompleteerror事件。如果成功完成并且表单符合你的需要，则只要简单地提交表单并进行到最终确认页即可。

Remember
切记

If you're asking for any kind of personal information or credit card data, ensure the page is served via SSL. Otherwise the dialog will warn the user their information may not be secure.
如果你要请求任何个人信息或信用卡数据，确保页面是经由SSL协议打开的。否则对话框会警告用户他们的信息可能不安全。

