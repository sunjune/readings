Video
视频

Users like videos; they can be fun, informative. On mobile devices, videos can be an easier way to consume information. But videos take bandwidth; they don't always work the same across every platform. Users don't like waiting for videos to load, or when they press play and nothing happens. Read more to find the simplest way to add video to your site and ensure users get the best possible experience on any device.
用户喜欢视频；它们会是有趣的、有信息量的。在移动设备上，视频是个更易于消费信息的途径。但是视频会占带宽；不能在各平台上一致运行。用户不喜欢等待视频加载，或者在他们点击播放却啥都看不到。接下来的内容将帮你找到在网站上添加视频最简单的办法，而且确保用户在任何设备上都尽可能获得最好的体验。

Guides
指南

  ·Add a video — Learn about the simplest ways to add video to your site and ensure users get the best possible experience on any device.
  添加视频 — 学习在你网站添加视频最简单的办法而且确保用户在任何设备上都尽可能获得最佳体验
  ·Provide alternatives for legacy platforms — Not all video formats are supported on all platforms. Check which formats are supported on the major platforms and make sure your video works in each of these.
  为非主流设备提供替代方案 — 并非所有的视频格式能被所有平台都支持。列出来那些被主流平台支持的视频格式并确保你的视频在其中。
  ·Customize the video player — Different platforms display video differently. Mobile solutions need to consider device orientation. Use Fullscreen API to control the fullscreen view of video content.
  自定义视频播放器 — 不同平台显示视频也是不一样的。移动解决方案需要考虑设备方向。使用Fullscreen API来控制视频的全屏视图。
  ·Size videos correctly — When it comes to keeping your users happy, size matters.
  合适的视频体积 — 要保持你的用户满意，体积很重要。
  ·Accessibility matters — Accessibility isn't a feature.
  可访问性问题 — 可访问性不是个功能点
  ·Quick Reference — A quick overview of properties on the video element.
  简明参考 — 对于video元素属性的简要说明

=============================
Add a video
添加视频
=============================

Learn about the simplest ways to add video to your site and ensure users get the best possible experience on any device.
学习给你的网站添加视频最简单的办法而且确保用户在任何设备上都能获得尽可能最好的体验。

In this lesson
本节主要内容

  ·Add the video element
  添加video元素
  ·Specify multiple file formats
  指定多种文件格式
  ·Specify a start and end time
  指定开始和结束时间
  ·Include a poster image
  包含一个海报图片

TL;DR
简而言之

  ·Use the video element to load, decode, and play video on your site.
  使用video元素在你的网站上加载、解码、播放视频
  ·Produce video in multiple formats to cover a range of mobile platforms.
  将视频制作成多种格式以适应不同的移动平台
  ·Size videos correctly; ensure they don't overflow their containers.
  控制视频文件大小，确保它们不会超出自身的容量
  ·Accessibility matters; add the track element as a child of the video element.
  可访问性问题，给video元素添加track子元素

Add the video element
添加video元素

Add the video element to load, decode, and play video in your site:
添加video元素在你的网站上加载、解码、播放视频

<video src="chrome.webm" type="video/webm">
    <p>Your browser does not support the video element.</p>
</video>

Specify multiple file formats
指定多种文件格式

Not all browsers support the same video formats. The <source> element lets you specify multiple formats as a fallback in case the user’s browser doesn’t support one of them. For example:
不是所有的浏览器都支持同样的视频格式。万一用户浏览器不支持其中的一种，<source>元素让你能指定多个格式以备调用。

    <video controls>
      <source src="chrome.webm" type="video/webm">
      <source src="chrome.mp4" type="video/mp4">
      <p>This browser does not support the video element.</p>
    </video>
    
When the browser parses the <source> tags, it uses the optional type attribute to help decide which file to download and play. If the browser supports WebM, it will play chrome.webm, if not, it will check if it can play MPEG-4 videos. Check out A Digital Media Primer for Geeks to find out more about how video and audio work on the web.
当浏览器解析<source>标签的时候，它使用type这个可选的属性来帮助决定下载和播放哪个文件。如果浏览器支持WebM，它就播放chrome.webm，如果不能，它就检查是否它能播放MPEG-4视频。查阅A Digital Media Primer for Geeks(https://www.xiph.org/video/vid1.shtml)以发现更多关于视频和音频如何在web上运行。

This approach has several advantages over serving different HTML or server-side scripting, especially on mobile:
Developers can list formats in order of preference.
这种方法对于提供HTML或服务器端脚本有很多好处，特别是在移动设备：开发人员可以按优先顺序列出这些格式。

Native client-side switching reduces latency; only one request is made to get content.
客户端本地切换延迟减少：只要发起一个请求来获取内容。

Letting the browser choose a format is simpler, quicker and potentially more reliable than using a server-side support database with user-agent detection.
让浏览器选择格式变得更简单、更迅速而且可能比用服务器端的支持数据库判断user-agent更可靠。

Specifying each file source’s type improves network performance; the browser can select a video source without having to download part of the video to ‘sniff’ the format.
指定每个源文件的类型可以提高网络性能；浏览器不必下载一部分视频来探测其格式就可以提前选择好视频源。

All of these points are especially important in mobile contexts, where bandwidth and latency are at a premium, and the user’s patience is likely to be limited. Not including a type attribute can affect performance when there are multiple sources with unsupported types.
所有这些点在移动环境下都非常重要，带宽和延迟都会产生额外费用，而且用户耐心也很有限。不带type属性在有多个不受支持类型源的情况下会影响性能。

Using your mobile browser developer tools, compare network activity with type attributes and without type attributes. Also check the response headers in your browser developer tools to ensure your server reports the right MIME type; otherwise video source type checks won’t work.
使用浏览器开发人员工具，对比一下带和不带type属性的网络活动。同时也在浏览器开发人员工具里看一下响应头确保服务器端给出了正确的MIME类型；否则视频源类型检查将无法进行。

Specify a start and end time
指定开始和结束时间

Save bandwidth and make your site feel more responsive: use the Media Fragments API to add a start and end time to the video element.
节省带宽并让你的网站感觉响应更好：使用Media Fragments API给video元素加上开始和结束时间。

To add a media fragment, you simply add #t=[start_time][,end_time] to the media URL. For example, to play the video between seconds 5 through 10, specify:
要添加媒体切片，你只要给媒体URL简单地加上#t=[开始时间][,结束时间]。例如，要播放从第5秒到第10秒的视频，定义如下：

<source src="video/chrome.webm#t=5,10" type="video/webm">

You can also use the Media Fragments API to deliver multiple views on the same video – like cue points in a DVD – without having to encode and serve multiple files.
你也可以使用Media Fragments API在同一个视频上实现多个视图 – 就象DVD的不同场景切入点 – 而不用去编码并提供多个实体文件。

Remember
切记

  ·The Media Fragments API is supported on most platforms, but not on iOS.
  大多数平台都支持Media Fragments API，但是iOS不支持。
  ·Make sure Range Requests are supported by your server. Range Requests are enabled by default on most servers, but some hosting services may turn them off.
  请确保你的服务器支持断点续传。断点续传在大多数服务器上都是启用的，不过一些主机服务商可能会把它关闭。

Using your browser developer tools, check for Accept-Ranges: bytes in the response headers:
使用你的浏览器开发人员工具，在响应头信息中检查Accept-Ranges: bytes。

Include a poster image
包含一张海报图片

Add a poster attribute to the video element so that your users have an idea of the content as soon as the element loads, without needing to download video or start playback.
给video元素加一个poster属性这样用户就能在视频加载的时候看到一些内容。

<video poster="poster.jpg" ...>
  ...
</video>

A poster can also be a fallback if the video src is broken or none of the video formats supplied are supported. The only downside to poster images is an additional file request, which consumes some bandwidth and requires rendering. For more information see Image optimization.
海报也能作为当视频源出现问题或者所提供的任何一种视频格式都不支持时候被调用。海报惟一的不好就是要额外请求一个文件，它要占用一些带宽并需要渲染。更多信息请参见Image optimization(https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer.html#image-optimization)。

Here’s a side-by-side comparison of videos without and with a poster image – we’ve made the poster image grayscale to prove it’s not the video:
下面是视频带和不带海报图片的比较 – 我们把海报做成灰度的以证明它不是视频。

============================================
Provide alternatives for legacy platforms
为老平台提供可替代选择
============================================

Not all video formats are supported on all platforms. Check which formats are supported on the major platforms and make sure your video works in each of these.
不是所有的视频格式都能被所有的平台所支持。查一下主流平台支持哪些格式确保你的视频在这其中。

In this lesson
本节主要内容

  ·Check which formats are supported
  查看哪些格式被支持
  ·Produce video in multiple formats
  将视频制成多种格式
  ·Check which format was used
  检查所用的是哪种格式

Check which formats are supported
检查哪些格式是被支持的

Use canPlayType() to find out which video formats are supported. The method takes a string argument consistent of a mime-type and optional codecs and returns one of the following values:
使用canPlayType()来找出哪种视频格式被支持。这个方法带一个字符串参数标明mime-type和一个可选的编码，返回下面值中的一个。

  ·(empty string)	The container and/or codec isn't supported.
  返回空字符  容器以及编码不被支持。
  ·maybe	The container and codec(s) might be supported, but the browser will need to download some video to check.
  maybe 容器和编码可能会被支持，但是浏览器还需要下载一些视频来检查。
  ·probably	The format appears to be supported.
  probably  这个格式看上去是能被支持的。

Here are some examples of canPlayType() arguments and return values when run in Chrome:
下面是canPlayType()参数的一些例子和在Chrome中运行时的返回值：

video/xyz	(empty string)
video/xyz; codecs="avc1.42E01E, mp4a.40.2"	(empty string)
video/xyz; codecs="nonsense, noise"	(empty string)
video/mp4; codecs="avc1.42E01E, mp4a.40.2"	probably
video/webm	maybe
video/webm; codecs="vp8, vorbis"	probably

Produce video in multiple formats
制作多种格式的视频

There are lots of tools to help save the same video in different formats:
有大量的工具来帮助把同一个视频存成不同的格式：

  ·Desktop tools: FFmpeg
  桌面工具：FFmpeg(https://ffmpeg.org/)
  ·GUI applications: Miro, HandBrake, VLC
  GUI应用：Miro(https://www.mirovideoconverter.com/)，HandBrake(https://handbrake.fr/)，VLC(https://www.videolan.org/)
  ·Online encoding/transcoding services: Zencoder, Amazon Elastic Encoder
  在线编码/转码服务：Zencoder(https://en.wikipedia.org/wiki/Zencoder)，Amazon Elastic Encoder(https://aws.amazon.com/elastictranscoder)

Check which format was used
检查所用的是何种格式

Want to know which video format was actually chosen by the browser?
想知道浏览器实际上选择哪种视频格式吗？

In JavaScript, use the video’s currentSrc property to return the source used.
在JavaScript中，用视频的currentSrc属性返回所用的源。

To see this in action, check out this demo: Chrome and Firefox choose chrome.webm (because that’s the first in the list of potential sources these browsers support) whereas Safari chooses chrome.mp4.
要在活动中看到这个，请查阅这个示例(https://developers.google.com/web/fundamentals/resources/samples/media/video/video-main.html)：Chrome和Firefox选择chrome.webm（因为那是这些浏览器可能支持的资源列表中最前面的）而Safari选择chrome.mp4。


============================================
Customize the video player
自定义视频播放器
============================================

Different platforms display video differently. Mobile solutions need to consider device orientation. Use Fullscreen API to control the fullscreen view of video content.
不同的平台显示视频是不同的。移动解决方案要考虑到设备方向。使用Fullscreen API来控制视频内容的全屏视图。

In this lesson
本节主要内容

  ·How device orientation works across devices
  设备方向如何跨设备运行
  ·Inline or fullscreen display
  行内或全屏显示
  ·Control fullscreening of content
  控制内容的全屏状态

How device orientation works across devices
设备方向如何跨平台运行

Device orientation isn’t an issue for desktop monitors or laptops, but is hugely important when considering web page design for mobile and tablets.
对于桌面或笔记本的屏幕来说没有方向这个问题，但考虑针对手机和平板的网页设计却是非常重要的。

Safari on iPhone does a good job of switching between portrait and landscape orientation:
iPhone上的Safari在水平和垂直方向切换的时候做得非常好：

Device orientation on an iPad and Chrome on Android can be problematic. For example, without any customization a video playing on an iPad in landscape orientation looks like this:
设备方向在iPad还有Android上的Chrome可能有问题。例如，在没有任何自定义的情况下，水平方向的iPad上视频播放看起来像是这样：

Setting the video width: 100% or max-width: 100% with CSS can resolve many device orientation layout problems. You may also want to consider fullscreen alternatives.
用CSS给视频设置width: 100%或者max-width: 100%可以解决很多设备方向的布局问题。你可能也会考虑用全屏供选方案。

Inline or fullscreen display
行内或者全屏显示

Different platforms display video differently. Safari on an iPhone displays a video element inline on a web page, but plays video back in fullscreen mode:
不同的平台显示视频也不一样。iPhone上的Safari把视频显示在网页行内，但是用全屏模式播放视频。

On Android, users can request request fullscreen mode by clicking the fullscreen icon. But the default is to play video inline:
在Android平台，用户可以通过在全屏图标上点按来请求全屏模式。但是默认在行内播放视频：

Safari on an iPad plays video inline:
iPad上的Safari在行内播放视频：

Control fullscreening of content
控制内容的全屏模式

For platforms that do not force fullscreen video playback, the Fullscreen API is widely supported. Use this API to control fullscreening of content, or the page.
对于不强制视频全屏播放的平台，Fullscreen API被广泛支持。使用这个API来控制内容或页面的全屏 。

To full screen an element, like a video:
将一个元素全屏，比如video：
elem.requestFullScreen();

To full screen the entire document:
将整个document全屏：
document.body.requestFullScreen();

You can also listen for fullscreen state changes:
你也可以监听全屏状态的变化：
video.addEventListener("fullscreenchange", handler);

Or, check to see if the element is currently in fullscreen mode:
或者，检查元素当前是否全屏模式：
console.log("In full screen mode: ", video.displayingFullscreen);

You can also use the CSS :fullscreen pseudo-class to change the way elements are displayed in fullscreen mode.
你也可以使用CSS的:fullscreen伪类来改变元素在全屏模式的显示方法。

On devices that support the Fullscreen API, consider using thumbnail images as placeholders for video:
在支持Fullscreen API的设备上，考虑使用缩略图来做为视频的占位符。

To see this in action, check out the demo.
要看这个行为，请查阅示例(https://developers.google.com/web/fundamentals/resources/samples/media/video/fullscreen.html)。

NOTE: requestFullScreen() is currently vendor prefixed and may require extra code for full cross browser compatibility.
注意：requestFullScreen()目前还要加厂商前缀而且可能需要额外的代码来跨浏览器兼容。


Size videos correctly
正确处理视频文件体积

When it comes to keeping your users happy, size matters:
当到了要保持用户满意度的时候，视频体积就有影响了：

In this guide
本节内容

  ·Check video size
  检查视频体积
  ·Ensure videos don’t overflow containers
  确保视频不会溢出容器

When it comes to keeping your users happy, size matters:
当到了要保持用户满意度的时候，视频体积就有影响了：

  ·Don’t serve videos with a larger frame size or higher quality than the platform can handle.
  不要提供平台处理不了的过大的帧尺寸或过高的清晰度。
  ·Don’t make your videos any longer than they need be.
  不要将视频制作得超出它所需要的长度。
  ·Long videos can cause hiccups with download and seeking; some browsers may have to wait until the video downloads before beginning playback.
  长视频会在下载或拖动定位的时候导致卡顿；一些浏览器可能要等视频下载完才开始播放。

Check video size
检查视频体积

The actual video frame size as encoded may be different from the video element dimensions (just as an image may not be displayed using its actual dimensions).
视频编码的实际帧尺寸可能与video元素的尺寸不同（就象图片可能不是用它的实际尺寸来显示一样）。

To check the encoded size of a video, use the video element videoWidth and videoHeight properties. width and height return the dimensions of the video element, which may have been sized using CSS or inline width and height attributes.
要检查视频的编码尺寸，使用video元素的videoWidth和videoHeight属性。width和height返回video元素的定义，那可能是由CSS或行内的宽和高属性决定的大小。

Ensure videos don’t overflow containers
确保视频不会溢出容器

When video elements are too big for the viewport, they may overflow their container, making it impossible for the user to see the content or use the controls.
当video元素远超出可视屏显范围，它们可能会溢出所在容器，用户将没办法看到内容或使用控制项。

You can control video dimensions using JavaScript or CSS. JavaScript libraries and plugins such as FitVids make it possible to maintain appropriate size and aspect ratio, even for Flash videos from YouTube and other sources.
你可以用JavaScript或CSS控制视频尺寸。JavaScript库和插件例如FitVids(https://fitvidsjs.com/)使得维护合适的尺寸和宽高比成为可能，即使是来自YouTube以及其他来源的Flash视频。

Use CSS media queries to specify the size of elements depending on the viewport dimensions; max-width: 100% is your friend.
使用CSS媒体侦测按照可视屏显尺寸来指定元素的大小；max-width: 100%是个很好的选择。

Remember
切记

  Don't force element sizing that results in an aspect ratio different from the original video. Squashed or stretched looks bad.
  不要强制指定元素尺寸那会造成与源视频不同的宽高比。被压扁或拉长看上去会很糟。

For media content in iframes (such as YouTube videos), try a responsive approach (like the one proposed by John Surdakowski).
对于在iframe里的媒体内容(例如YouTube视频)，尝试用响应的方式(象John Surdakowski提议的这个https://avexdesigns.com/responsive-youtube-embed/)。

CSS:
    .video-container {
        position: relative;
        padding-bottom: 56.25%;
        padding-top: 30px;
        height: 0;
        overflow: hidden;
    }

    .video-container iframe,
    .video-container object,
    .video-container embed {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

HTML:

    <div class="video-container">
      <iframe src="//www.youtube.com/embed/l-BA9Ee2XuM"
              frameborder="0" width="560" height="315">
      </iframe>
    </div>

Compare the responsive sample to the unresponsive version.
比较一下响应式的示例(https://developers.google.com/web/fundamentals/resources/samples/media/video/responsive_embed.html)和不做响应处理的版本(https://developers.google.com/web/fundamentals/resources/samples/media/video/unyt.html)。


















