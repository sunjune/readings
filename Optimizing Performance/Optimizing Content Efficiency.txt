Optimizing Content Efficiency
优化内容效率

Our web applications continue to grow in their scope, ambition, and functionality - that's a good thing. However, the relentless march towards a richer web is driving another trend: the amount of data downloaded by each application continues to increase at a steady pace. To deliver great performance we need to optimize delivery of each and every byte of data!
我们的web应用持续增长着它们的范围、雄心和功能 - 这是件好事。然而，这种无情的向富web迈进带来了另一个趋势：每个应用要下载的数据总量稳定持续增长。要提供更好的性能我们需要对每个字节的数据进行优化。

What does a modern web application look like? HTTP Archive can help us answer this question. The project tracks how the web is built by periodically crawling the most popular sites (300,000+ from the Alexa Top 1M list) and recording and aggregating analytics on the number resources, content types, and other metadata for each individual destination.
一个现代浏览器看上去是什么样的？HTTP Archive(http://httparchive.org/)能帮我们回答这个疑问。这个项目通过周期性地爬虫收集最流行的网站(Alexa前1百万名单中的30万以上)并对每个单独的目标记录和汇总分析资源数量、内容类型以及其他的元数据。

The above data captures the trend in growth of number of downloaded bytes for popular destinations on the web between January 2013 and January 2014. Of course, not every site grows at the same rate or requires the same amount of data, hence the reason why we are highlighting the different quantiles within the distribution: 50th (median), 75th, and 90th.
上面的数据获取的是2013年1月到2014年1月之间流行网站被下载的总字节数的增长趋势。当然了，不是每个网站都以这种速率增长或请求同样的数据量，这就是为什么我们高亮显示不同的百分比：第50(中值)、第75和第90。

A median site at the beginning of 2014 is composed of 75 requests that add up to 1054 KB of total transferred bytes, and the total number of bytes (and requests) has grown at a steady pace throughout the previous year. This by itself should not be all that surprising, but it does carry important performance implications: yes, internet speeds are getting faster, but they are getting faster at different rates in different countries, and many users are still subject to data caps and expensive metered plans - especially on mobile.
2014年初的中值站点有75次合计达到1054KB的传输字节，而且过去一年字节总数(以及请求数)稳步增长。就它本身来说这没什么好吃惊的，但它带着重要的性能影响：是的，网速越来越快，但在不同的国家变快的速率不同，而且很多用户仍然受制于数据上限和昂贵的流量计划 - 特别是在移动端。

Unlike their desktop counterparts, web applications do not require a separate installation process: enter the URL and we are up and running – that’s a key feature of the web. However, to make this happen we often have to fetch dozens, and sometime hundreds, of various resources, all of which can add up to megabytes of data and must come together in hundreds of milliseconds to facilitate the instant web experience we are aiming for.
与桌面应用不同的是，web应用不用单独安装：进入URL我们就启动运行了 - 这是网站的主要特色。然而，要实现这个我们通常要取得数十甚至数百的各种资源，合计达到数M字节的数据，而且必须在几百毫秒内把它们汇集到一起来让我们目标中的迅捷网站体验成为现实。

Achieving an instant web experience in light of these requirements is no small feat, which is why optimizing content efficiency is critical: eliminating unnecessary downloads, optimizing transfer encoding of each resource through various compression techniques, and leveraging caching whenever possible to eliminate redundant downloads.
在这么多的请求下要达到迅捷网站体验可是个不小的壮举，这就是为什么优化内容效率是很关键的：去掉不必须的下载、通过多种压缩技术对每种资源进行优化传输编码、只要有可能就借助缓存来减少多余的下载。

=====================================
Eliminating unnecessary downloads
去掉不必要的下载
=====================================

The fastest and best optimized resource is a resource not sent. Have you audited your resources recently? You should, and you should do so periodically to ensure that each resource is helping deliver a better user experience.
最快最优化的资源就是没有发送出去的资源。你最近审计过你的资源吗？你应该，而且应该定期确认每个资源都有助于提供更好的用户体验。

TL;DR
简而言之

  ·Inventory all own and third party assets on your pages
  清点你页面上所有自主和第三方的资源
  ·Measure the performance of each asset: its value and its technical performance
  测量每个资源的性能：它的重要性和它的技术性能
  ·Determine if the resources are providing sufficient value
  确定这些资源是否提供足够的价值

In this guide
本节主要内容

The fastest and best optimized resource is a resource not sent. Of course, this may seem like an obvious statement, but in practice it is all too often overlooked: as a performance engineer, it is your job to always maintain a critical eye for any opportunity to eliminate unnecessary resources from your application. It’s a good practice to question, and periodically revisit, the implicit and explicit assumptions with your team. A few examples:
最快速最佳的资源就是没有发出去的资源。当然，这可能看起来像是个很明显的说法，但在实际中它常常被忽略：作为一个高性能工程师，总是保持挑剔的眼光抓住任何机会从你的应用中剔除那些不必要的资源就是你的工作。好的练习包括提问、周期性地重复访问、与你的团队暗示或明确地假设。举例如下：
  
  ·We’ve always included resource X on our pages, but does the cost of downloading and displaying it offset the value it delivers to the user? Can we measure and prove its value?
  我们总是包含着一个资源X在我们的页面上，但是下载并显示它的开销能补偿它带给用户的价值吗？我们能测定并证明它的价值吗？
  ·Does the resource — especially if it is a third-party resource — deliver consistent performance? Is this resource in the critical path, or need to be? If the resource is in the critical path, could it be a single point of failure for our site - i.e. if the resource is unavailable, will it affect performance and the user experience of our pages?
  这个资源 — 特别是如果是个第三方资源 — 能保持稳定的性能吗？这个资源在关键路径里吗，或者说需要在吗？如果资源是关键路径里的，它会成为我们网站失败的单点吗？ - 换句话说，如果资源不可用，它会影响我们页面的性能和用户体验吗？
  ·Does this resource need or have an SLA? Does this resource follow performance best practices: compression, caching, and so on?
  资源需要或已经有SLA(服务等级协议)了吗？资源遵从性能最佳实践了吗：压缩、缓存等等？
  
All too frequently our pages contain resources which are unnecessary, or worse, hinder page performance without delivering much value to the visitor or the site they are hosted on. This applies equally to first-party and third-party resources and widgets:
我们的页面包含太多不必要的资源，或者更糟的，阻碍了页面性能且没有提供更多价值给访问者或它们所在的网站。这同样适用于第一方和第三方资源和小部件：

  ·Site A has decided to display a photo carousel on its homepage to allow the visitor to preview multiple photos with a quick click — all the photos are loaded when the page is loaded, and photos are advanced by the user.
  站点A决定在首页显示一个照片轮播，允许用户通过快速点击来预览多个照片 — 当页面加载的时候所有图片都被加载了，而且照片被用户提高。
    ·Question: have you measured how many users view multiple photos in the carousel? You could be incurring high overhead by downloading unnecessary resources which are never viewed by most visitors.
    问题：你测量过有多少用户在轮播里看多张照片吗？你会招致过多非必要资源的下载流量，而大部分访问者从来都没看过。
  ·Site B has decided to install a third-party widget to display related content, improve social engagement, or provide some other service.
  站点B决定安装一个第三方小部件来显示相关内容，提升社交参与度，或者提供一些其他服务。
    ·Question: have you tracked how many visitors use the widget or click-through on the content provided by the widget? Is the engagement generated by this widget enough to justify its overhead?
    问题：你跟踪过有多少访问者使用了小部件或从它提供的内容上点击了吗？部件所产生的参与度与它的消耗对等吗？

As you can see, while eliminating unnecessary downloads seems like a trivial statement, in practice it is anything but, as it often requires a lot careful thinking and measurement to make the call. In fact, for best results you should periodically inventory and revisit these questions for each and every asset on your pages.
就像你看到的，虽然去除不必要的下载看上去是琐碎的说法，但实际上它是任何事，因为它经常需要大量的认真思考和测量来最终实施。事实上，为了最佳结果，你应该定期盘点页面上的东西并重新审视这些问题。

============================================================
Optimizing encoding and transfer size of text-based assets
优化基于文本的编码和传输大小
============================================================

Our web applications continue to grow in their scope, ambition, and functionality - that's a good thing. However, the relentless march towards a richer web is driving another trend: the amount of data downloaded by each application continues to increase at a steady pace. To deliver great performance we need to optimize delivery of each and every byte of data!
我们的web应用持续增长着它们的范围、雄心和功能 - 这是件好事。然而，这种无情的向富web迈进带来了另一个趋势：每个应用要下载的数据总量稳定持续增长。要提供更好的性能我们需要对每个字节的数据进行优化。

In this guide
本节主要内容

  ·Data compression 101
  数据压缩101
  ·Minification: preprocessing & context-specific optimizations
  最小化：预压缩和上下文指定优化
  ·Text compression with GZIP
  用GZIP压缩文本

Data compression 101
数据压缩101

Once we’ve eliminated any unnecessary resources, the next step is to minimize the total size of the remaining resources the browser has to download - i.e. compress them. Depending on the resource type - text, images, fonts, and so on - we have a number of different techniques at our disposal: generic tools that can be enabled on the server, pre-processing optimizations for specific content-types, and resource specific optimizations that require input from the developer.
Delivering the best performance requires the combination of all of these techniques.
一旦我们去除了不必要的资源，下一步就是最小化浏览器要下载的其余资源总大小了 - 也就是，压缩它们。根据资源类型 - 文本、图片、字体等等 - 我们有大量不同的技术供支配：一般的可以在服务器端启用的工具、对指定内容类型的预压缩优化以及需要由开发者输入的资源特定优化。为达到最佳性能要对所有这些技术综合利用。

























