Build Your Site
构建你的网站

Build your multi-device site from the ground up. Learn what a build process is, the tasks to automate, and how to build a site with the Web Starter Kit. Learn how to debug with Chrome Developer Tools.
从零开始构建你的多设备网站。学习构建的流程，自动化任务以及如果用Web Starter Kit来构建网站。学习如何用Chrome开发人员工具来调试。

Web developers have to think about a million things at once and the build step is one of the most critical, yet most cumbersome to get started with. You have to work out all the tasks that you need to automate such as: Image compression, CSS minification, JavaScript concatenation, Responsive testing, Unit testing, the list goes on…
Web开发人员要同时思考很多事情，而构建步骤是其中最关键的一件，也是开始最麻烦的事。你得把所有要自动化处理的都做出来，比如：图片压缩、CSS缩小、JavaScript相关的事、响应性测试、单元测试，还有很多…

Follow these guides and learn the best way to structure your workflow so that the sites that you create already follow all the best practices from the minute you start.
跟随本教程学习构造工作流的最佳途径，这样你创建的网站在你刚开始的那一刻就在按最佳实践进行了。

You can also use Web Starter Kit to begin your projects with an amazing default workflow and great looking templates right out of the box.
你也可以用Web Starter Kit以不可思议的默认工作流和漂亮的模板来开始你的项目。

===========================
What Is a Build Process
什么是构建流程
===========================

A build process is a set of tasks to compile and test code before deployment. Learn which tasks to include in your build process and why.
构建流程是一系列在部署之前的编译和测试代码的任务。学习哪些任务要包含在你的构建流程中及其原因。

In this guide
本节主要内容

  ·How should the build process be used in your workflow?
  构建流程应该如何用于你的工作流？
  ·What tasks should the build process automate?
  何种任务应该是自动化的构建流程？
  ·Automate testing
  自动化测试
  ·Integrate with debugging tools
  与调试工具结合
  ·What’s in the Web Starter Kit build process?
  Web Starter Kit构建流程中有什么？

TL;DR
简而言之

  ·Build steps shouldn't be linear and manually driven; they should be cyclical and automatic.
  构建的步骤不应该是线性且手动的；它们应该可以重复并自动化。
  ·Your build process tools must optimize for performance; they should automatically minify and concatenate JavaScript, CSS, HTML, and images.
  你的构建过程工具应该为性能优化；它们应该自动把JavaScript、CSS、HTML以及图片缩小并联系起来。
  ·Testing across many devices is a laborious task. Automate as much as you can!
  在多种设备上进行测试是很困难的任务。尽可能让这些操作自动化。
  ·Limit context switching; integrate build tools with debugging tools so you can iterate with ease.
  减少环境切换；把构建工具和调试工具整合在一起这样你就可以轻松多了。

How should the build process be used in your workflow?
构建过程应该如何用于你的工作流？

Your build process shouldn’t be a separate set of tasks that you run towards the end of your development workflow. Instead, integrate your build process with your coding, testing, and iterative debugging cycles.
你的构建过程不应该是你开发工作流结束前单独的一部分任务。相反，要把构建过程与编码、测试、重复调试循环结合起来。

What tasks should the build process automate?
构建过程应该把什么任务自动化？

Get tools that automatically run these build tasks so that you can keep coding:
弄一些把下面这些构建任务自动化的工具这样你就可以好好编码了：

  ·Test the code compiles and report errors.
  测试代码的编译并报告错误。
  ·Optimize the code by minifying and concatenating JavaScript, CSS, HTML, and images.
  通过缩小并把JavaScript、CSS、HTML以及图片联系起来达到优化效果。
  ·Test responsiveness.
  测试响应性。
  ·Test performance.
  测试性能。
  ·Compile optimized code.
  编译优化过的代码。
  ·Reload code in the browser.
  在浏览器里重载代码。

We prefer and recommend Gulp because it’s an expressive, streaming build system that’s easy to set up.
我们选择并推荐Gulp(http://gulpjs.com/)因为它是一套易于搭建的富于表现力、流式构建系统。

Regardless of whether you’re using a command-line set of tools or a GUI like CodeKit, your build process tools should automatically optimize your code as you work, and iteratively update compiled code.
不管你是在用命令行工具还是像CodeKit(https://incident57.com/codekit/)这样的GUI工具，你的构建工具应该在你工作的时候自动优化代码并能不断更新编译过的代码。

Additional build tools that support this workflow:
其他支持工作流的构建工具：

  ·Grunt (http://gruntjs.com/)
  ·Make (http://www.gnu.org/software/make/)
  ·Broccolli (https://github.com/broccolijs/broccoli)

Automate testing
自动测试

Testing across many devices is a laborious task. Automate as much as you can!
在很多设备上做测试是一项困难的任务。尽量让它自动化进行！

Your build process should integrate with live reloading and support synchronized navigation so you can test your site on many devices in one-click.
你的构建过程应该结合到动态重载并支持同步导航这样你就能一次点击后在多个设备上测试你的站点了。

Integrate your build process with a responsive screenshot tool like BrowserStack (commercial) so you can check your site’s layout across lots and lots of devices.
把构建过程与响应式截屏工具比如BrowserStack(http://www.browserstack.com/)结合起来这样你就能在大量的设备上检查你的网站。

Integrate your build process with a performance tool like PageSpeed. Make it easy to check performance all the time and on any device.
把构建过程与PageSpeed这样的性能工具结合起来。在任何设备任何时间查看性能都很容易。

Get your build process to kick off unit tests that ‘emulate’ your site on as many devices as possible. Mimic hardware and network constraints as much as possible in these tests.
让构建过程甩掉单元测试而在尽可能多的设备上仿真你的网站。在这些测试中尽可能多地模拟硬件地网络参数。

Integrate with debugging tools
整合调试工具

Limit context switching; integrate build tools with debugging tools so you can integrate with ease. Avoid at all costs the separation between debugging your code and seeing the results on a range of devices. This slows your development to a halt and you’ll start to think maybe it’s OK to just have a site that works nice on a desktop.
减少环境切换；将构建工具和调试工具整合起来这样你就能轻松了。避免了所有调试代码与在各种设备上观察结果这种分裂的消耗。这会将你的开发拖慢到停滞，你会去想或许只要网站在桌面上显示正常就行了。

Seamless integration with debugging tools means you can debug your code and see it live on as many real and emulated devices as you deem necessary. You can keep debugging your code, and the build tools automatically push code changes live.
与调试工具的无缝结合意味着你可以调试代码并在必要的时候尽可能实时并仿真地看到执行结果。你能继续调试代码，而构建工具自动将代码变更实时推送。

What’s in the Web Starter Kit build process?
Web Starter Kit构建过程有什么？

At a glance, the Web Starter Kit build tools automate these tasks:
简单说，Web Starter Kit构建工具将如下任务自动化了：

  ·Cross-device synchronization; synchronizes clicks, scrolls, forms, and live-reload across multiple devices as you edit your code.
  跨设备同步；同步点击、滚动、表单，以及在你编码代码的时候在多设备上动态加载。
  ·Live browser reloading; reloads the browser in real-time anytime you edit code.
  浏览器动态重载；在你编辑代码的时候实时重载浏览器。
  ·Built in HTTP Server for previewing your site so you can test your pages without setting up other tools.
  内置HTTP服务器用于预览你的站点这样你不用配置其他工具就可以测试页面。
  ·PageSpeed Insights Reporting.
  PageSpeed Insights Reporting工具.
  ·Performance optimization; minifies and concatenates JavaScript, CSS, HTML, and images.
  性能优化；缩小并将JavaScript、CSS、HTML以及图片联系起来。
  ·Compiles Sass into CSS.
  将Sass编译成CSS。

The next section covers the Web Starter Kit build process in detail.
下一节将详细讲解Web Starter Kit构建过程。

====================================
Build Site with Web Starter Kit
以Web Starter Kit构建网站
====================================

The Web Starter Kit starter files and tools provide most of what you need to incorporate responsive and performance checks as part of your developer workflow. Use this guide to build a site using the Web Starter Kit. Learn how to track code changes, apply responsive styles, optimize, and debug across devices.
Web Starter Kit初始文件和工具提供了大多数在开发者工作流中把响应和性能检查合并所需要的。利用本教程通过Web Starter Kit来构建一个站点。学习如何跟踪代码变更、应用响应式样式、优化以及跨设备调试。

In this guide
本节主要内容

  ·Build this sample app
  构建示例应用
  ·Track code changes and optimize
  跟踪代码变更并优化
  ·Add an image
  加入图片
  ·Add CSS
  加入样式
  ·Apply UX patterns
  应用UX模式
  ·Add JavaScript
  加入JavaScript
  ·Check performance
  检查性能
  ·Debug your code on multiple devices
  在多个设备上调试你的代码
  ·Summary of Web Starter Kit tools
  Web Starter Kit工具摘要

TL;DR
简而言之

  ·Don't wait to test how your site looks across devices; check your site's responsiveness as you code.
  别等着测试你的网站在不同设备上的显示效果；编码的时候就要检查网站的响应性。
  ·Optimize your site as you code; make PageSpeed checks an iterative step in your coding workflow.
  编码的时候就优化你的网站；让PageSpeed在你的工作流中检查重复的步骤。
  ·Identify and follow UX patterns; style guidelines aren't optional.
  决定并遵从UX模式；样式指导方针不是可有可无的。
  ·Debug on multiple devices; use the Web Starter Kit live loading and browser developer tools to debug on as many devices as you can.
  在多设备上调试；使用Web Starter Kit动态重载和浏览器开发人员工具在尽量多的设备上调试。

Build this sample app
构建示例应用

To see the Web Starter Kit tools in action, this guide walks you through the build process as you add an image, update HTML and CSS, and add some JavaScript to your starter project. If you want a quick peak at what the Web Starter Kit tools can do, skip ahead to this quick summary.
为在实际中了解Web Starter Kit工具，本教程逐步带你了解构建过程，加入图片、更新HTML和CSS并给你的起步项目加一些JavaScript。如果你想快点知道Web Starter Kit工具都能干啥，请直接查阅快速摘要。

Before you start, make sure you’ve set up the Web Starter Kit. When you are finished the walking through the steps in this guide, this is what you’ll see in your browser:
在你开始之前，请确认你已经配置好了Web Starter Kit。当你结束本教程的所有步骤之后，你在浏览器里会看到下面的内容：

Track code changes and optimize
跟踪代码变更并优化

When you’re ready to write code, run gulp serve. This tool tracks changes as you code, reloads live changes in your browser, and automatically runs optimization tools specific to the changes made. For example, when you add an image, the image is automatically optimized and loaded in any browser instance open on any device.
当你准备好编码的时候，运行gulp serve。这个工具跟踪你代码的变化，在你浏览器动态重载，并且自动运行针对这些变化的优化工具。例如，当你加入一个图片，图片就被自动优化并在任何设备上任何浏览器进程中加载。

Important
重点

Check responsiveness as often as possible. Shrink the browser to tablet and phone size to see how content behaves all the time.
尽可能频繁地检查响应性。一直记得将浏览器缩小到平板和手机的大小来查看内容有何种表现。

Add an image
加一个图片

To see the gulp serve tool in action: add awesome-photo.jpg to the images folder.
在实际操作中看看gulp serve工具：将awesome-photo.jpg加到images文件夹中。

$ cp awesome-photo.jpg web-starter-kit/app/images
$ git add awesome-photo.jpg

Add the image to main in index.html:
将图片加入到index.html的main标签中：

<main>
  <h1>Hello.</h1>
  <p>Welcome to Web Starter Kit.</p>
  <div><img src="/images/awesome-photo.jpg"></div>
</main>

As you save index.html, watch your terminal. The gulp serve tool runs the image through imagemin and outputs the optimized image in the dist folder.
当你保存index.html的时候，观察终端。gulp serve工具将图片通过imagemin(https://www.npmjs.org/package/gulp-imagemin)进行处理并将优化过的图片输出到dist文件夹中。

Note
备注

  ·You can also run gulp images to manually optimize images across your project.
  你也可以手工运行gulp images在你的项目间优化图片。

Reload the browser live to see the image:
实时重载浏览器看到如下图所示：

Don’t forget to resize the browser to see how the image looks on different device sizes.
不要忘记改变浏览器大小来观察图片在不同设备尺寸上的显示效果。

Remember
切记

As you code, keep your terminal and local staged version open in your browser. Watch the terminal for tooling results; watch the browser for newly staged content.
在你编码的时候，保持你的终端和本地阶段版本都在浏览器中打开着。观察终端的工具化结果；观察浏览器的新阶段内容。

Add CSS
加CSS

When you add style changes, gulp serve runs the gulp-minify-css tool, minifying CSS and injecting it into all connected browsers.
当你给样式加入变更时，gulp serve会运行gulp-minify-css工具，缩小CSS并将它注入到所有连接着的浏览器。

Add this style change to the main.css in web-starter-kit/apps/styles folder:
把这些样式变更加入到web-starter-kit/apps/styles目录下的main.css中：

main {
    margin: 0 auto;
    /* Height of the header */
    padding: 60px 16px 16px 16px;
    font-size: 16px;
    font-weight: bold;
    color: red;
}

Reload and resize the browser to see how the styles look:
重载并改变浏览器大小来查看样式显示结果：

Note
备注

Run gulp styles tool to manually check CSS across your project. The gulp serve tool automatically runs this tool when you change CSS files.
运行gulp样式工具在你的项目间检查CSS。gulp serve工具会在你修改了CSS文件后自动运行该工具。

Apply UX patterns
应用UX模式

Don’t write a style guide as an afterthought. Start your project off with UX patterns, and apply these patterns as you code. Don’t have a style guide? Use the Web Starter Kit style guide which aligns with the Web Fundamentals Style Guidelines.
别在事后再想起编写样式指导。在你的项目开始时就要遵从UX模式，并在你编码的时候就应用这些模式。没有样式指导？使用Web Starter Kit样式指引吧，它与Web Fundamentals Style是一致的。

$ cd web-starter-kit/app/styleguide/

Add JavaScript
加入JavaScript

The gulp serve tool minifies your JavaScript (gulp-jsmin) and detects errors using gulp jshint.
gulp serve工具缩小你的JavaScript(gulp-jsmin https://www.npmjs.org/package/gulp-jsmin)并使用gulp jshint(https://www.npmjs.org/package/gulp-jshint)检查错误。

Update index.html to call a new script, app.js:
更新index.html来调用新的脚本app.js：

<main>
    <h1>Hello.</h1>
    <p>Welcome to <span></span>Web Starter Kit.</p>
    <div><img src="/images/awesome-photo.jpg"></div>
    <script src="/scripts/app.js" async></script> 
</main>

Create app.js in web-starter-kit/app/scripts:

var span = document.getElementsByTagName('span')[0];
span.textContent = 'the amazing '; // change DOM text content
span.style.display = 'inline';  // change CSSOM property
// create a new element, style it, and append it to the DOM
var loadTime = document.createElement('div');
loadTime.textContent = 'You loaded this page on: ' + new Date();
loadTime.style.color = 'blue';
document.body.appendChild(loadTime);

Reload the browser:
重新加载浏览器：

Check performance
检查性能

Now that you’ve added some html, CSS, and JavaScript, it’s time to checkout how the project is performing.
现在你已经加入了一些HTML、CSS还有JavaScript，是时候看看项目是怎么执行的了。

The Web Starter Kit integrates with PageSpeed Insights. If you haven’t used PageSpeed Insights, you are about to start.
Web Starter Kit集成了PageSpeed Insights。如果你还没用过PageSpeed Insights，你该开始用用了。

Once you’ve got a chunk of work done and you want to check your site’s speed and user experience, stop gulp serve (control-C), and run gulp pagespeed:
一旦你已经完成了主要的工作而且想要检查网站的速度和用户体验，停止gulp serve(control-C)，并且运行gulp pagespeed：

The good news: you got a perfect User Experience score. Yay!
好消息是：你达到了完美的用户体验得分。

The Speed Score is off by 1 point; compression isn’t enabled. You won’t compress your site until you are ready to host it.
Speed得分还差一点儿；压缩没有启用。等你准备好托管网站的时候再压缩。

For more information on how to fix your site based on these PageSpeed results, see PageSpeed Rules and Recommendations.
关于如何参照PageSpeed结果来调整网站的更多住处，请参阅PageSpeed Rules and Recommendations(https://developers.google.com/web/fundamentals/performance/critical-rendering-path/page-speed-rules-and-recommendations)。


















