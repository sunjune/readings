Set Up Environment
搭建环境

Set up your environment to include a good editor, debugging tools, and build tools for the multi-device web. The Web Starter Kit provides tools for building responsive and performant sites.
搭建你的环境，包括好的编辑器、debug工具以及为跨设置网页准备的构造工具。Web Starter Kit提供了构造响应式和高效网站的工具。

A good development environment sets you up for success.
一个好的开发环境能帮你走向成功。

A great editor lets you code efficiently and helps you identify issues quickly; Developers tools that integrate into the browser let you quickly check that the code you create produces the correct output across all browsers; and a bootstrapper lets you start your project that follows all the best practices in seconds.
一个好的编辑器让你高效地写代码并能快速定位问题；内置的开发人员工具让你能快速检查你写的代码为所有浏览器产生正确的输出；引导程序能让你在瞬间以最佳实践来开始你的项目。

==========================
Choose a Good Editor
选择好的编辑器
==========================

Your code editor is your main development tool; you use it to write and save lines of code. Write better code faster by learning your editor's shortcuts and installing key plugins.
你的代码编辑器是你的主要开发工具；你用它编写并保存代码。通过学习编辑的快捷方式并安装关键插件来写得又好又快。

In this guide
本节主要内容

  ·Truly learn to use your editor
  深入学习如何使用编辑器
  ·Install the package manager
  安装扩展包管理器
  ·There’s a plugin for that
  有插件是干那个的

TL;DR
简而言之

  ·Choose an editor that lets you customize short-cuts and has lots of plugins to help you write better code.
  选一个编辑器能够定制快捷方式并有大量的插件可以让你写出更好的代码。
  ·Consider installing a package manager to make it easier to discover, install, and update plugins.
  考虑安装扩展包管理器让你更容易发现、安装和升级插件。
  ·Use the package manager to install plugins that help keep you productive during development; start with the recommendations in this guide.
  使用扩展包管理器来安装让你在开发时保持高产的插件；以本教程的推荐开始吧。

Truly learn to use your editor
深入学习使用你的编辑器

Code editors are the quintessential development tool. But what makes an editor more than a simple word processor are its shortcuts that get you working faster.
代码编辑器是开发工具的精髓。但是让编辑器有别于简单字处理器的是它的快捷方式给你工作带来的便利。

You know you’ve truly learned to use your editor when you are able to quickly move around your code using a range of keyboard short-cuts and editor commands. It’s always good to keep a cheatsheet handy for editor commands. Top editors also let you customize commands and keyboard shortcuts so that you only have to remember your own implementations.
你知道在你深入学习了编辑器的使用之后你就能用一系列键盘快捷方式和编辑命令在你的代码中快速游移。对编辑器命令做个备忘单总是能派上用场的。最好的编辑器能让你定制命令和键盘快捷方式而你只要记住自己的执行方式即可。

Sublime is a great editor with tons of plugins to help you write better code faster. It also has a package manager that makes it easy to install new plugins. Though Sublime costs money, you can try it for free and this guide assumes Sublime as the default editor of choice.
Sublime(http://www.sublimetext.com/)是一款非常棒的编辑器，有无数的插件可以帮你把代码写得更好更快。它也有扩展包管理器非常容易安装新插件。虽然Sublime是收费的，但你可以试用它的免费版，本教程假设Sublime是你的默认编辑器选择。

Note
切记

Rob Dodson's blog post on how to get to know and love Sublime is a great reference for getting the most out of your editor. The concepts are relevant to any text editor, not just Sublime.
Rob Dodson关于如何了解并爱上Sublime的博客文章(http://robdodson.me/blog/2012/06/23/sublime-text-2-tips-and-shortcuts/)是一篇如何有效利用你的编辑器的非常棒的参考。这些概念适用于任何文本编辑器，不仅是Sublime。

Install the package manager
安装扩展包管理器

Package managers make it easy to find, install, and keep packages / plugins up-to-date.
扩展包管理器将查找、安装以及保持扩展包/插件更新变得很容易。

Here’s a sneak peak at what you can do with the Sublime Text package manager.
到这里看看能用Sublime扩展包管理器做什么。(https://sublime.wbond.net/)


There’s a plugin for that
有插件是干那个的

Plugins help you stay more productive. What are the things you keep having to go back out to other tools to do?
Linting - there’s a plugin for that. Showing what changes haven’t been committed - there are plugins for that. Integration with other tools, such as GitHub, there are plugins for that.
插件能带给你很多好处。有啥事是你想要通过其他工具来完成的吗？排查错误 - 有插件是做这个的。把提交的改变显示出来 - 有插件做这个。与其他工具结合，比如GitHub，有插件做这个。

Package managers make it very easy to find, install, and update plugins. In the Sublime editor, open your package manager (ctrl+shift+p), enter ‘Install Package’, and then enter the name of the plugin you are looking for (or else browse all plugins).
扩展包管理器使得寻找、安装以及更新插件非常容易。在Sublime编辑器中，打开你的扩展包管理器(ctrl+shift+p)，输入‘Install Package’，然后输入你要找的插件名字(或者浏览所有插件)。

Check out these trending lists of Sublime plugins. Here are the plugins we love and recommend you install because they help you speed up your development:
查阅Sublime插件趋势列表(https://sublime.wbond.net/browse)。下面是一些我们喜欢并推荐你安装的插件，因为它们可以帮你加快你的开发速度：

Plugin	Description

Autoprefixer	Uses Autoprefixer library to prefix properties and values according to the Can I Use database.
ColorPicker	Pick any color from the palette.
Emmet	Web developer toolkit.
GitGutter	Shows an icon in the gutter area indicating whether a line has been inserted, modified or deleted.
HTML-CSS-JS Prettify	Formats your HTML, CSS, JavaScript and JSON code so it looks pretty.
LiveReload	Live reloading browser support. If you're using the Web Starter Kit, you don't need this plugin.
PolymerSnippets	Keyboard short-cuts to create Polymer and Web Component snippets fast.
sublime-github	Useful GitHub commands like opening and editing files in GitHub.
SublimeLinter	Code linter to help you write cleaner and bug-free code.
Tag	Set of utilities to work with HTML/XML tags.
Theme - Soda	Dark and light custom UI themes.

===========================
Set Up Developer Tools
配置开发工具
===========================

Learn how to set up essential tools for the multi-device development workflow. Your tools should test your site's responsiveness and performance with minimum manual effort.
学习如何为多设备开发工作流配置必需的工具。你的工具应该以最少的手工操作来测试网站的响应和性能。

In this guide
本节主要内容

  ·Tools you need and why
  你需要的工具以及为什么需要
  ·Set up aliases for common commands
  为常用命令设置别名
  ·Set up responsive tools
  配置响应工具
  ·Set up build and live reloading tools
  配置构造和动态重载工具
  ·Set up emulation and debugging tools
  配置模拟和调试工具

TL;DR
简而言之

  ·Make the command line work for you; create aliases that are easy to remember and fast to type.
  使用命令行工作，创建别名便于记忆并容易输入。
  ·Don't check responsive layouts manually; get a tool to resize and capture screen views.
  不要手动检查响应式布局，找一个工具来调整大小并捕捉屏幕视图。
  ·Set up build tools that automatically optimize, build, and live reload your testing URL.
  配置构造工具实现自动优化、构造和动态重载测试URL。
  ·Don't wait to see your site on a device; use device emulation and remote debugging now not later.
  不用在你的设备上等着查看网站；使用设备模拟器并马上远程调试。

Tools you need and why
你所需要的工具以及为什么需要

There’s no shortage of options when it comes to tools in the web development world. There’s often so much choice, it’s daunting. You find the simplest path to building a great site and stick with it as long as it’s working for you.
在Web开发的世界里就没有缺少选择的时候。经常会有太多可选的，想想就头疼。你就找最简单的办法来建造很棒的网站，只要能用就一直用下去。

But if you want your site to work on small devices with unreliable network connectivity, you must invest the time and effort it takes to learn how to use build tools that will optimize performance and check your site’s responsiveness across devices.
但是如果你想让你的网站运行在小一些而且网络连接也不稳定的设备上，你就得投入时间和精力用在学习如何搭建那些优化性能和检查网站跨设备响应性的工具上了。

Tools for testing across devices include a combination of actual devices, device emulation, and device debugging tools. It’s kind of scary, the thought of testing your site on any number of devices. But you need to do this and you need the tools to make this possible:
用于测试跨设备的工具包含实体设备、设备模拟以及设备调试工具的综合。想到要在无数设备上测试网站真是太可怕了。但是你需要这样做而且需要把这些变为可能的工具。


Set up aliases for common commands
为常用命令设置别名

You need to save as much time as you can for the extra effort it takes to test across devices. If you are still looking at a list of command shortcuts every time you make your way into the terminal and/or you are manually typing the same long commands, it’s time to create some short-cuts.
你需要节省尽可能多的时间用于跨设备测试。如果你每次在终端上都要看着命令快捷键列表以及/或者手工键入同样长的命令，是时候创建一些快捷方式了。

How to create command-line short-cuts
如何创建命令行快捷方式

The easiest way create command-line short-cuts is to add aliases for common commands to your bashrc file. On Mac or Linux:
创建命令行快捷方式最简单的办法就是在bashrc文件中给常用命令加别名。在Mac或Linux上：

  ·From the command line anywhere, type open -a 'Sublime Text' ~/.bashrc.
  在命令行的任意地方，输入open -a 'Sublime Text' ~/.bashrc。
  ·Add a new alias, for example, alias master='git checkout master'.
  添加新的别名，例如，alias master='git checkout master'。
  ·From your source directory, run master.
  在你的源代码目录里，运行master。

Another slightly more advanced way to create short-cuts is to store dotfiles in GitHub. One major gain: your short-cuts won’t be device dependent.
另一个稍微高级一点的创建快捷方式的办法是在GitHub里保存dotfile(http://dotfiles.github.io/)。主要的好处是：你的快捷方式将不依赖设备。

Note
备注

See these instructions for setting up Windows aliases.
查看关于设置Windows命令行别名(http://msdn.microsoft.com/en-us/library/windows/desktop/ms682057(v=vs.85).aspx)。


Set up responsive tools
配置响应式工具

Checking your site’s responsiveness needn’t be a manual task. Get at least one tool to resize the browser, and preferably one with image capturing so that you can compare multiple views.
不需要手工检查你的网站响应性。找至少一种来调整浏览器大小的工具，而且最好是能截屏的这样你就能比较多种视图了。

For Chrome, the Responsive Inspect Chrome extension visually shows the media queries of an opened site, including the min-width and max-width of each media query specified in CSS stylesheets. Use this tool to resize the site in the browser and take a screenshot:
在Chrome上，Responsive Inspect Chrome扩展(http://outof.me/responsive-inspector-beta-released/)能可视化地展示一个网站打开时的媒体侦测，包括每一次在CSS样式表中指定的媒体侦测min-width和max-width。使用这个工具在浏览器中重设网站大小并可以截屏：

To set up and use the extension:
要配置并使用这个扩展：

  ·Download the extension from the Chrome Web Store.
  从Chrome Web Store里下载这个扩展。
  ·On any opened site, press the Responsive Inspect icon in the extension tool bar.
  在任何一个打开的网站上，在扩展工具栏中点击Responsive Inspect的图标。
  ·Resize screen and take a screen shot.
  重设屏幕大小并截屏。

To test on the Firefox browser, enable the Responsive Design View. Use this view to change the size of content area without having to resize the entire browser window.
要在Firefox浏览器中测试，启用Responsive Design视图。使用该视图改变内容区域大小而不用调整整个浏览器窗口大小。


Set up build and live reloading tools
配置构造和动态重载工具

Build tools streamline the process of transferring source files to a target result. You want build tools that keep track of your site’s performance; they optimize source files automatically and measure your site’s performance. We recommend Gulp. Other examples include: Grunt, Broccoli, Make.
构造工具简化将源文件处理成目标结果的过程。你想要持续追踪网站性能的构造工具；它们自动对源文件进行优化并且测量网站性能。我们推荐Gulp(http://gulpjs.com/)。其他还包括：Grunt(http://gruntjs.com/)，Broccoli(https://github.com/broccolijs/broccoli)，Make(http://www.gnu.org/software/make/)。

You also want live reloading which will automatically update the page with any changes you make to your HTML, CSS, Javascript and images. No more manual refreshing of the page after every tweak.
你也想在对HTML、CSS、JavaScript和图片进行修改之后自动更新页面的动态重载。不用每次调整后都手动刷新页面。

Examples:

  ·Ghostlab (commercial)
  Ghostlab(http://vanamco.com/ghostlab/) (商业版)
  ·LiveReload (commercial)
  LiveReload(http://livereload.com/) (商业版)
  ·Adobe Edge Inspect
  Adobe Edge Inspect(http://html.adobe.com/edge/inspect/)
  ·Emmet LiveStyle
  Emmet LiveStyle(http://livestyle.emmet.io/install/)

The Web Starter Kit does all this and more: watches for changes, optimizes files, builds your site, reloads the browser live and synchronizes scrolling, clicks, and navigation across all your devices. Follow the instructions in the next guide to set up the Web Starter Kit.
这些用Web Starter Kit都可以做到而且还可以做得更多：观察变更、优化文件、构建网站、动态且同步滚动重新加载浏览器、点击以及在你所有的设备上导航。跟随接下来的说明教程来配置Web Starter Kit。

Set up emulation and debugging tools
配置模块和调试工具

Don’t put off debugging your site across multiple devices. A very simple first step is to set up device emulation that integrates with debugging tools.
不要在多种设备上直接调试你的网站。非常简单的第一步就是配置整合了调试工具的设备仿真。

Using device emulators, such as iOS Safari Simulator, GenyMotion and the Official Android Emulator for Android devices as well as Modern.ie for versions of IE; you can see how your site works across a range of devices.
使用设备模拟器，比如iOS Safari Simulator(https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html)、GenyMotion(http://www.genymotion.com/)和官方Android设备模拟器(http://developer.android.com/tools/devices/emulator.html)以及模拟各版本IE的Modern.ie(https://modern.ie/)；你可以看看你的网站在各种设备上表现如何。

Chrome DevTools has a device emulation feature built in which mimics some device behaviors such as screen size, screen density and touch support; learn how to use DevTools emulation.
Chrome开发工具有内置的设备仿真功能，可以模拟一些设备行为例如屏幕大小、屏幕密度并且支持触摸；在这里(https://developers.google.com/web/fundamentals/tools/test/emulator.html)学习如何使用开发工具的仿真功能。

Emulation is a good start, but it’s no substitute for the real thing. Eventually, preferably as soon as possible, you must debug your site on actual devices. Remote debugging tools let you debug your site on a desktop and see changes on remote devices.
仿真是个好的开始，但不能代替真机。最终，只要有可能，你必须在真实设备上调试你的网站。远程调试工具可以让你在桌面上调试网站并能看到它在远程设备上的表现。

Here’s a brief comparison of remote debugging options, with links to set-up documentation:
这里是一个关于远程调试选项的简明对照表，附有配置文档链接：

  Remote Debugging Tool   	Description
  Chrome DevTools Remote Debugging	Use Chrome DevTools on your development machine to inspect, debug, and analyze browser tabs and WebViews on your Android device.
  https://developer.chrome.com/devtools/docs/remote-debugging
  
  Weinre	Remote debugger for web pages. This is helpful when there is no remote debug tools available for a browser, for example the Android Browser on older devices (pre-KitKat).
  http://people.apache.org/~pmuellr/weinre/docs/latest/Installing.html
  
  Firefox for Android + ADB	Inspect or debug code running in Firefox for Android over USB.
  https://developer.mozilla.org/en-US/docs/Tools/Remote_Debugging/Firefox_for_Android
  
  Safari Web Inspector - Safari on iOS	Debug web content on iOS device directly from your desktop.
  https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/GettingStarted/GettingStarted.html#//apple_ref/doc/uid/TP40007874-CH2-SW1

























